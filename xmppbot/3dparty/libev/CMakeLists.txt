CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

PROJECT(libev)
INCLUDE(CheckIncludeFile)

IF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
ENDIF("${CMAKE_SYSTEM_PROCESSOR}" STREQUAL "x86_64")

CHECK_INCLUDE_FILE("dlfcn.h" HAVE_DLFCN_H)
CHECK_INCLUDE_FILE("inttypes.h" HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE("memory.h" HAVE_MEMORY_H)
CHECK_INCLUDE_FILE("poll.h" HAVE_POLL_H)
CHECK_INCLUDE_FILE("sys/epoll.h" HAVE_SYS_EPOLL_H)
CHECK_INCLUDE_FILE("sys/eventfd.h" HAVE_SYS_EVENTFD_H)
CHECK_INCLUDE_FILE("sys/event.h" HAVE_SYS_EVENT_H)
CHECK_INCLUDE_FILE("sys/inotify.h" HAVE_SYS_INOTIFY_H)
CHECK_INCLUDE_FILE("sys/select.h" HAVE_SYS_SELECT_H)
CHECK_INCLUDE_FILE("sys/signalfd.h" HAVE_SYS_SIGNALFD_H)
CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE("unistd.h" HAVE_UNISTD_H)

INCLUDE(CheckFunctionExists)

CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
CHECK_FUNCTION_EXISTS(epoll_ctl HAVE_EPOLL_CTL)
CHECK_FUNCTION_EXISTS(eventfd HAVE_EVENTFD)
CHECK_FUNCTION_EXISTS(floor HAVE_FLOOR)
CHECK_FUNCTION_EXISTS(inotify_init HAVE_INOTIFY_INIT)
CHECK_FUNCTION_EXISTS(kqueue HAVE_KQUEUE)
CHECK_FUNCTION_EXISTS(nanosleep HAVE_NANOSLEEP)
CHECK_FUNCTION_EXISTS(poll HAVE_POLL)
CHECK_FUNCTION_EXISTS(select HAVE_SELECT)
CHECK_FUNCTION_EXISTS(listen HAVE_LISTEN)
CHECK_FUNCTION_EXISTS(port_create HAVE_PORT_CREATE)

SET(STDC_HEADERS 1)

#SET( libev_include_dir "${PROJECT_SOURCE_DIR}/qwe123" )

#SET( include_contrib_dir ${include_contrib_dir} ${libev_include_dir} )

ADD_DEFINITIONS(-DHAVE_CONFIG_H)

CONFIGURE_FILE(config.h.cmake ${LIBRARY_OUTPUT_PATH}/include/ev_config.h)

INCLUDE_DIRECTORIES(${LIBRARY_OUTPUT_PATH}/include)
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})

#SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DEV_CONFIG_H=<ev_config.h>")

IF(WIN32)
ADD_LIBRARY(ev STATIC ev.c event.c)
ENDIF(WIN32)

IF(IOS)
ADD_LIBRARY(ev STATIC ev.c event.c)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DIOS")
ELSE(IOS)
ADD_LIBRARY(ev SHARED ev.c event.c)
ENDIF(IOS)
   
IF (WIN32)
TARGET_LINK_LIBRARIES(ev ws2_32)
ENDIF (WIN32)
