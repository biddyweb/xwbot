#cmake_minimum_required (VERSION 2.6) 
#PROJECT (xwlib)

IF(CMAKE_COMPILER_IS_GNUCC)
SET(ANSI_CFLAGS "-ansi -std=c89 -pedantic")
SET(CORE_CFLAGS "-Wall -I./ ${DEBUG_CFLAGS}")
ENDIF(CMAKE_COMPILER_IS_GNUCC)

IF(IOS)
SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DIOS")
SET (COMPILE_FLAGS "${COMPILE_FLAGS} -DIOS")
ENDIF(IOS)

#SET(BUILD_SHARED_LIBS ON)

# this includes system checking definitions
INCLUDE(XConfig_H.cmake)
CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/x_config.h.in 
		${LIBRARY_OUTPUT_PATH}/include/x_config.h)

INCLUDE_DIRECTORIES(${LIBRARY_OUTPUT_PATH}/include)
INCLUDE_DIRECTORIES( ${CMAKE_CURRENT_SOURCE_DIR} )

#INCLUDE_DIRECTORIES( ${include_top_dir} )
#INCLUDE_DIRECTORIES( "${include_top_dir}/include" )

ADD_LIBRARY(xofactory x_objfactory.c x_utils.c x_string.c  x_ref.c x_lib.c x_stuff.c)
#SET_TARGET_PROPERTIES(xofactory PROPERTIES VERSION 0.0.1 SOVERSION 0.0)
#SET_TARGET_PROPERTIES(xofactory PROPERTIES COMPILE_FLAGS "${CORE_CFLAGS} ${ANSI_CFLAGS}")

TARGET_LINK_LIBRARIES( xofactory ${CMAKE_THREAD_LIBS_INIT})

IF(WIN32)
TARGET_LINK_LIBRARIES( xofactory ws2_32 ${CMAKE_THREAD_LIBS_INIT})
ENDIF(WIN32)

IF(ANDROID)
TARGET_LINK_LIBRARIES(xofactory log)
ENDIF(ANDROID)


IF(WIN32)
STRING (REGEX REPLACE "/RTC(su|[1su])" "Default" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
STRING (REGEX REPLACE "/RTC(su|[1su])" "Default" COMPILE_FLAGS "${COMPILE_FLAGS}")
ENDIF(WIN32)

IF(IOS)
ADD_LIBRARY(xw STATIC x_obj.c)
ELSE(IOS)
ADD_LIBRARY(xw SHARED x_obj.c)
ENDIF(IOS)

TARGET_LINK_LIBRARIES(xw xofactory ev)
#SET_TARGET_PROPERTIES(xw PROPERTIES VERSION 0.0.1 SOVERSION 0.0)
#SET_TARGET_PROPERTIES(xw PROPERTIES COMPILE_FLAGS "${CORE_CFLAGS} ${ANSI_CFLAGS}")
SET_TARGET_PROPERTIES(xw PROPERTIES COMPILE_FLAGS "${CORE_CFLAGS}")

IF(ANDROID)
TARGET_LINK_LIBRARIES(xw xofactory log)
ENDIF(ANDROID)

#SET(TARGET_VERSION_MAJOR 1)
#SET(TARGET_VERSION_MINOR 2)

FILE(GLOB ifiles "${CMAKE_CURRENT_SOURCE_DIR}/*.h")
INSTALL(FILES ${ifiles} DESTINATION include/xwlib)
INSTALL(TARGETS xw xofactory DESTINATION lib)

SET(CPACK_PACKAGE_VERSION "1.2.0")
SET(CPACK_PACKAGE_VERSION_MAJOR "1")
SET(CPACK_PACKAGE_VERSION_MINOR "2")
SET(CPACK_PACKAGE_VERSION_PATCH "0") 
#SET(CPACK_GENERATOR "DEB")
SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "gobee") 
#SET(CPACK_GENERATOR "RPM")

IF(NOT IOS)
ADD_EXECUTABLE (test1 test1.c)
TARGET_LINK_LIBRARIES(test1 xw)
ADD_DEPENDENCIES( test1 xw )
ENDIF(NOT IOS)


IF(LINUX)
ADD_EXECUTABLE (circbuf_test x_stuff.c)
set_target_properties(circbuf_test PROPERTIES COMPILE_FLAGS -DUNIT_TEST)
TARGET_LINK_LIBRARIES(circbuf_test xofactory)
ENDIF(LINUX)

INCLUDE(CPack)

ENABLE_TESTING()

